// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:kishk_driver/common_utils/log_utils.dart';

import '../../../features/about/data/about_entity.dart';
import '../../../features/auth/login/data/auth_data_entity.dart';
import '../../../features/auth/profile/data/logoutt_entity.dart';
import '../../../features/auth/profile/data/profile_entity.dart';
import '../../../features/contact_us/data/contact_us_entity.dart';
import '../../../features/contact_us/data/contact_us_erorr_entity.dart';



JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
  static final Map<String, JsonConvertFunction> convertFuncMap = {
    (AuthDataEntity).toString(): AuthDataEntity.fromJson,
    (AuthDataData).toString(): AuthDataData.fromJson,
    (AboutEntity).toString(): AboutEntity.fromJson,
    (AboutData).toString(): AboutData.fromJson,
    (ContactUsEntity).toString(): ContactUsEntity.fromJson,
    (ContactUsData).toString(): ContactUsData.fromJson,
    (ContactUsErorrEntity).toString(): ContactUsErorrEntity.fromJson,
    (ContactUsErorrErrors).toString(): ContactUsErorrErrors.fromJson,
    (LogouttEntity).toString(): LogouttEntity.fromJson,
    (ProfileEntity).toString(): ProfileEntity.fromJson,
    (ProfileData).toString(): ProfileData.fromJson,
    (ProfileDataRows).toString(): ProfileDataRows.fromJson,
  };

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      Log.e('asT<$T> $e stackTrace $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert))
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>)
          .map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!)
          .toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<AuthDataEntity>[] is M) {
      return data
          .map<AuthDataEntity>(
              (Map<String, dynamic> e) => AuthDataEntity.fromJson(e))
          .toList() as M;
    }
    if (<AuthDataData>[] is M) {
      return data
          .map<AuthDataData>(
              (Map<String, dynamic> e) => AuthDataData.fromJson(e))
          .toList() as M;
    }
    if (<AboutEntity>[] is M) {
      return data
          .map<AboutEntity>((Map<String, dynamic> e) => AboutEntity.fromJson(e))
          .toList() as M;
    }
    if (<AboutData>[] is M) {
      return data
          .map<AboutData>((Map<String, dynamic> e) => AboutData.fromJson(e))
          .toList() as M;
    }
    if (<ContactUsEntity>[] is M) {
      return data
          .map<ContactUsEntity>(
              (Map<String, dynamic> e) => ContactUsEntity.fromJson(e))
          .toList() as M;
    }
    if (<ContactUsData>[] is M) {
      return data
          .map<ContactUsData>(
              (Map<String, dynamic> e) => ContactUsData.fromJson(e))
          .toList() as M;
    }
    if (<ContactUsErorrEntity>[] is M) {
      return data
          .map<ContactUsErorrEntity>(
              (Map<String, dynamic> e) => ContactUsErorrEntity.fromJson(e))
          .toList() as M;
    }
    if (<ContactUsErorrErrors>[] is M) {
      return data
          .map<ContactUsErorrErrors>(
              (Map<String, dynamic> e) => ContactUsErorrErrors.fromJson(e))
          .toList() as M;
    }
    if (<LogouttEntity>[] is M) {
      return data
          .map<LogouttEntity>(
              (Map<String, dynamic> e) => LogouttEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProfileEntity>[] is M) {
      return data
          .map<ProfileEntity>(
              (Map<String, dynamic> e) => ProfileEntity.fromJson(e))
          .toList() as M;
    }
    if (<ProfileData>[] is M) {
      return data
          .map<ProfileData>((Map<String, dynamic> e) => ProfileData.fromJson(e))
          .toList() as M;
    }
    if (<ProfileDataRows>[] is M) {
      return data
          .map<ProfileDataRows>(
              (Map<String, dynamic> e) => ProfileDataRows.fromJson(e))
          .toList() as M;
    }

    debugPrint("${M.toString()} not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is List) {
      return _getListChildType<M>(
          json.map((e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}
